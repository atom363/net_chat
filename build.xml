<?xml version="1.0" encoding="UTF-8"?>
<project name="net_chat" default="all">
  
  
  <property file="build.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="700m"/>
  <patternset id="ignored.files">
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/*.rbc/**"/>
    <exclude name="**/*.yarb/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/CVS/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/vssver.scc/**"/>
    <exclude name="**/vssver2.scc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.war"/>
    <include name="*.swc"/>
    <include name="*.zip"/>
    <include name="*.egg"/>
    <include name="*.ane"/>
    <include name="*.jar"/>
    <include name="*.ear"/>
  </patternset>
  <patternset id="compiler.resources">
    <exclude name="**/?*.java"/>
    <exclude name="**/?*.form"/>
    <exclude name="**/?*.class"/>
    <exclude name="**/?*.groovy"/>
    <exclude name="**/?*.scala"/>
    <exclude name="**/?*.flex"/>
    <exclude name="**/?*.kt"/>
    <exclude name="**/?*.clj"/>
    <exclude name="**/?*.aj"/>
  </patternset>
  
  <property name="project.jdk.home" value=""/>
  <property name="project.jdk.bin" value=""/>
  <property name="project.jdk.classpath" value=""/>
  
  <!-- Modules -->
  
  
  <!-- Module network -->
  
  <dirname property="module.network.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.network" value=""/>
  <property name="module.jdk.bin.network" value=""/>
  <property name="module.jdk.classpath.network" value=""/>
  
  <property name="compiler.args.network" value="-encoding UTF-8 -source 9 -target 9 ${compiler.args}"/>
  
  <property name="network.output.dir" value="${module.network.basedir}/out/production/network"/>
  <property name="network.testoutput.dir" value="${module.network.basedir}/out/test/network"/>
  
  <path id="network.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="network.module.production.classpath"/>
  
  <path id="network.runtime.production.module.classpath">
    <pathelement location="${network.output.dir}"/>
  </path>
  
  <path id="network.module.classpath">
    <pathelement location="${network.output.dir}"/>
  </path>
  
  <path id="network.runtime.module.classpath">
    <pathelement location="${network.testoutput.dir}"/>
    <pathelement location="${network.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.network">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.network">
    <patternset refid="excluded.from.module.network"/>
  </patternset>
  
  <path id="network.module.sourcepath">
    <dirset dir="${module.network.basedir}/network">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.network" depends="compile.module.network.production,compile.module.network.tests" description="Compile module network"/>
  
  <target name="compile.module.network.production" description="Compile module network; production classes">
    <mkdir dir="${network.output.dir}"/>
    <javac destdir="${network.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.network}/javac">
      <compilerarg line="${compiler.args.network}"/>
      <bootclasspath refid="network.module.bootclasspath"/>
      <classpath refid="network.module.production.classpath"/>
      <src refid="network.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.network"/>
    </javac>
    
    <copy todir="${network.output.dir}">
      <fileset dir="${module.network.basedir}/network/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.network.tests" depends="compile.module.network.production" description="compile module network; test classes" unless="skip.tests"/>
  
  <target name="clean.module.network" description="cleanup module">
    <delete dir="${network.output.dir}"/>
    <delete dir="${network.testoutput.dir}"/>
  </target>
  
  
  <!-- Module client -->
  
  <dirname property="module.client.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.client" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.client" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.client" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.client" value="-encoding UTF-8 -source 9 -target 9 ${compiler.args}"/>
  
  <property name="client.output.dir" value="${module.client.basedir}/out/production/client"/>
  <property name="client.testoutput.dir" value="${module.client.basedir}/out/test/client"/>
  
  <path id="client.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="client.module.production.classpath">
    <pathelement location="${network.output.dir}"/>
  </path>
  
  <path id="client.runtime.production.module.classpath">
    <pathelement location="${client.output.dir}"/>
    <pathelement location="${network.output.dir}"/>
  </path>
  
  <path id="client.module.classpath">
    <pathelement location="${client.output.dir}"/>
    <pathelement location="${network.testoutput.dir}"/>
    <pathelement location="${network.output.dir}"/>
  </path>
  
  <path id="client.runtime.module.classpath">
    <pathelement location="${client.testoutput.dir}"/>
    <pathelement location="${client.output.dir}"/>
    <pathelement location="${network.testoutput.dir}"/>
    <pathelement location="${network.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.client">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.client">
    <patternset refid="excluded.from.module.client"/>
  </patternset>
  
  <path id="client.module.sourcepath">
    <dirset dir="${module.client.basedir}/client">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.client" depends="compile.module.client.production,compile.module.client.tests" description="Compile module client"/>
  
  <target name="compile.module.client.production" depends="compile.module.network" description="Compile module client; production classes">
    <mkdir dir="${client.output.dir}"/>
    <javac destdir="${client.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.client}/javac">
      <compilerarg line="${compiler.args.client}"/>
      <bootclasspath refid="client.module.bootclasspath"/>
      <classpath refid="client.module.production.classpath"/>
      <src refid="client.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.client"/>
    </javac>
    
    <copy todir="${client.output.dir}">
      <fileset dir="${module.client.basedir}/client/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.client.tests" depends="compile.module.client.production" description="compile module client; test classes" unless="skip.tests"/>
  
  <target name="clean.module.client" description="cleanup module">
    <delete dir="${client.output.dir}"/>
    <delete dir="${client.testoutput.dir}"/>
  </target>
  
  
  <!-- Module server -->
  
  <dirname property="module.server.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.server" value=""/>
  <property name="module.jdk.bin.server" value=""/>
  <property name="module.jdk.classpath.server" value=""/>
  
  <property name="compiler.args.server" value="-encoding UTF-8 -source 9 -target 9 ${compiler.args}"/>
  
  <property name="server.output.dir" value="${module.server.basedir}/out/production/server"/>
  <property name="server.testoutput.dir" value="${module.server.basedir}/out/test/server"/>
  
  <path id="server.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="server.module.production.classpath">
    <pathelement location="${network.output.dir}"/>
  </path>
  
  <path id="server.runtime.production.module.classpath">
    <pathelement location="${server.output.dir}"/>
    <pathelement location="${network.output.dir}"/>
  </path>
  
  <path id="server.module.classpath">
    <pathelement location="${server.output.dir}"/>
    <pathelement location="${network.testoutput.dir}"/>
    <pathelement location="${network.output.dir}"/>
  </path>
  
  <path id="server.runtime.module.classpath">
    <pathelement location="${server.testoutput.dir}"/>
    <pathelement location="${server.output.dir}"/>
    <pathelement location="${network.testoutput.dir}"/>
    <pathelement location="${network.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.server">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.server">
    <patternset refid="excluded.from.module.server"/>
  </patternset>
  
  <path id="server.module.sourcepath">
    <dirset dir="${module.server.basedir}/server">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.server" depends="compile.module.server.production,compile.module.server.tests" description="Compile module server"/>
  
  <target name="compile.module.server.production" depends="compile.module.network" description="Compile module server; production classes">
    <mkdir dir="${server.output.dir}"/>
    <javac destdir="${server.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.server}/javac">
      <compilerarg line="${compiler.args.server}"/>
      <bootclasspath refid="server.module.bootclasspath"/>
      <classpath refid="server.module.production.classpath"/>
      <src refid="server.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.server"/>
    </javac>
    
    <copy todir="${server.output.dir}">
      <fileset dir="${module.server.basedir}/server/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.server.tests" depends="compile.module.server.production" description="compile module server; test classes" unless="skip.tests"/>
  
  <target name="clean.module.server" description="cleanup module">
    <delete dir="${server.output.dir}"/>
    <delete dir="${server.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.network, clean.module.client, clean.module.server" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.network, compile.module.client, compile.module.server" description="build all modules"/>
  
  <target name="all" depends="build.modules" description="build all"/>
</project>